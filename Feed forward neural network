import numpy as np def sigmoid(x): 
    return 1 / (1 + np.exp(-x)) def sigmoid_derivative(x):     return x * (1 - x) class NeuralNetwork:     def __init__(self, input_size, hidden_size, output_size):         self.input_size = input_size         self.hidden_size = hidden_size         self.output_size = output_size         self.weights_input_hidden = np.random.uniform(size=(input_size, hidden_size))         self.weights_hidden_output = np.random.uniform(size=(hidden_size, output_size))     def feedforward(self, X):         self.hidden_layer_input = np.dot(X, self.weights_input_hidden)         self.hidden_layer_output = sigmoid(self.hidden_layer_input) 
        self.output_layer_input = np.dot(self.hidden_layer_output, self.weights_hidden_output)         self.output_layer_output = sigmoid(self.output_layer_input)         return self.output_layer_output     def train(self, X, y, learning_rate): 
        output_error = y - self.feedforward(X)         output_delta = output_error * sigmoid_derivative(self.output_layer_output)         hidden_layer_error = output_delta.dot(self.weights_hidden_output.T) 
        hidden_layer_delta = hidden_layer_error * sigmoid_derivative(self.hidden_layer_output)         self.weights_hidden_output += self.hidden_layer_output.T.dot(output_delta) * learning_rate         self.weights_input_hidden += X.T.dot(hidden_layer_delta) * learning_rate if __name__ == "__main__":     input_size = 2     hidden_size = 4     output_size = 1 
    neural_network = NeuralNetwork(input_size, hidden_size, output_size) 
    X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])     y = np.array([[0], [1], [1], [0]]) 
    epochs = 10000     learning_rate = 0.1     for epoch in range(epochs):         neural_network.train(X, y, learning_rate)     for i in range(len(X)): 
        output = neural_network.feedforward(X[i])         print(f"Input: {X[i]} Output: {output}") 
 
 
